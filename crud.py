import os
from time import sleep

# Classe para representar um usu√°rio com nome e idade.
class Usuario:
    def __init__(self, nome, idade):
        self.nome = nome  # Nome do usu√°rio
        self.idade = idade  # Idade do usu√°rio


# Classe para gerenciar as opera√ß√µes de CRUD sobre os usu√°rios.
class GerenciadorUsuarios:
    def __init__(self):
        # Define o caminho do arquivo onde os dados ser√£o armazenados.
        self.arquivo = os.path.join(os.path.dirname(__file__), 'usuarios.txt')

        # Verifica se o arquivo j√° existe. Se n√£o existir, cria um arquivo vazio.
        if not os.path.exists(self.arquivo):
            with open(self.arquivo, 'w'):
                pass

    # M√©todo para adicionar um novo usu√°rio.
    def adicionar_usuario(self, nome, idade):
        # Abre o arquivo no modo de adi√ß√£o e escreve os dados do usu√°rio.
        with open(self.arquivo, 'a') as f:
            f.write(f"{nome}, {idade}\n")
            print("Usu√°rio adicionado com sucesso!")

    # M√©todo para listar todos os usu√°rios cadastrados.
    def listar_usuarios(self):
        if os.path.exists(self.arquivo):  # Verifica se o arquivo existe.
            with open(self.arquivo, 'r') as f:
                print("=" * 100)
                print("Lista de usu√°rios:")
                print("-" * 100)

                # L√™ cada linha do arquivo e exibe os dados formatados.
                for linha in f:
                    nome, idade = linha.strip().split(',')
                    print("*" * 100)
                    print(f'Nome: {nome}, Idade: {idade}')
                    print('*' * 100)

                print('=' * 100)
        else:
            print('Nenhum usu√°rio cadastrado.')

    # M√©todo para atualizar os dados de um usu√°rio existente.
    def atualizar_usuario(self, nome, novo_nome, nova_idade):
        with open(self.arquivo, 'r') as f:
            linhas = f.readlines()  # L√™ todas as linhas do arquivo.

        with open(self.arquivo, 'w') as f:
            atualizado = False  # Flag para verificar se o usu√°rio foi atualizado.

            for linha in linhas:
                nome_usuario, idade = linha.strip().split(',')

                # Se encontrar o usu√°rio pelo nome, atualiza os dados.
                if nome_usuario == nome:
                    f.write(f'{novo_nome},{nova_idade}\n')
                    atualizado = True
                else:
                    f.write(f'{nome_usuario},{idade}\n')

            # Mensagens de feedback para o usu√°rio.
            if atualizado:
                print("‚úÖ Usu√°rio atualizado com sucesso!")
            else:
                print('‚ùå Usu√°rio n√£o encontrado.')

    # M√©todo para excluir um usu√°rio.
    def excluir_usuario(self, nome):
        with open(self.arquivo, 'r') as f:
            linhas = f.readlines()  # L√™ todas as linhas do arquivo.

        with open(self.arquivo, 'w') as f:
            excluido = False  # Flag para verificar se o usu√°rio foi exclu√≠do.

            for linha in linhas:
                nome_usuario, idade = linha.strip().split(',')

                # Se o nome n√£o for o buscado, mant√©m o registro.
                if nome_usuario != nome:
                    f.write(f'{nome_usuario},{idade}\n')
                else:
                    excluido = True  # Marca que o usu√°rio foi exclu√≠do.

            # Mensagens de feedback para o usu√°rio.
            if excluido:
                print("üóë Usu√°rio exclu√≠do com sucesso!")
            else:
                print('‚ùå Usu√°rio n√£o encontrado.')


# Fun√ß√£o para exibir o menu principal.
def exibir_menu():
    print("\nMENU:")
    print("1. Adicionar Usu√°rio")
    print("2. Listar Usu√°rios")
    print("3. Atualizar Usu√°rio")
    print("4. Excluir Usu√°rio")
    print("5. Sair")


# Fun√ß√£o principal que controla o programa.
def main():
    gerenciador = GerenciadorUsuarios()  # Cria uma inst√¢ncia do gerenciador.

    while True:
        exibir_menu()  # Exibe o menu de op√ß√µes.
        opcao = input("Escolha uma op√ß√£o:\n>>> ")

        if opcao == "1":  # Adicionar usu√°rio.
            nome = input("Digite o nome:\n>>> ")
            idade = input("Digite a idade:\n>>> ")
            gerenciador.adicionar_usuario(nome, idade)

        elif opcao == "2":  # Listar usu√°rios.
            gerenciador.listar_usuarios()

        elif opcao == "3":  # Atualizar usu√°rio.
            nome_antigo = input("Digite o nome a ser atualizado:\n>>> ")
            novo_nome = input("Digite o novo nome:\n>>> ")
            nova_idade = input("Digite a nova idade:\n>>> ")
            gerenciador.atualizar_usuario(nome_antigo, novo_nome, nova_idade)

        elif opcao == "4":  # Excluir usu√°rio.
            nome = input("Digite o nome do usu√°rio a ser exclu√≠do:\n>>> ")
            gerenciador.excluir_usuario(nome)

        elif opcao == "5":  # Sair do programa.
            print("Saindo...")
            sleep(3)
            break

        else:  # Op√ß√£o inv√°lida.
            print("Op√ß√£o inv√°lida. Tente novamente!")


# Ponto de entrada do programa.
if __name__ == "__main__":
    main()
